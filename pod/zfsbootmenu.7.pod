=pod

=head1 NAME

B<zfsbootmenu> - System Integration

=head1 SYNOPSIS

ZFSBootMenu behavior is controlled through ZFS filesystem properties and command-line options provided to the ZFSBootMenu kernel.

=head1 Command-Line Parameters

These options are set on the kernel command line when booting the initramfs or UEFI bundle. Default options were chosen to allow general systems to boot without setting any values.

=over 4

=item B<spl_hostid=E<lt>hostidE<gt>>

When creating an initramfs or UEFI bundle, the I</etc/hostid> from the system is copied into the target. If this image will be used on another system with a different hostid, replace B<E<lt>hostidE<gt>> with the desired hostid, as an eight-digit hexadecimal number, to override the value contained within the image.

=item B<zbm.prefer=E<lt>poolE<gt>>

ZFSBootMenu will attempt to import as many pools as possible to identify boot environments and will, by default, look for the I<bootfs> property on the first imported pool (sorted alphabetically) to select the default boot environment. If you have multiple pools, replace B<E<lt>poolE<gt>> with the name of your preferred pool to override the default. If B<E<lt>poolE<gt>> is the name of a pool followed by a literal I<!> character, ZFSBootMenu will insist on successfully importing the named pool before attempting to import any others.

=item B<zbm.import_delay=E<lt>timeE<gt>>

Should ZFSBootMenu fail to successfully import any pool, it will repeat import attempts indefinitely until at least one pool can be imported or the user chooses to drop to a recovery shell. Each subsequent attempt will proceed after a delay of B<E<lt>timeE<gt>> seconds. When B<E<lt>timeE<gt>> is unspecified or is anything other than a positive integer, a default value of 5 seconds will be used.

=item B<zbm.import_policy>

This option controls how the pool import process should take place.

=over 2

=item B<zbm.import_policy=hostid>

Set this option to allow run-time reconfiguration of the SPL hostid. If a pool is preferred via B<zbm.prefer> and the pool can not be imported with a preconfigured hostid, the system will attempt to adopt the hostid of the system that last imported the pool. If a preferred pool is not set and no pools can be imported using a preconfigured hostid, the system will adopt the hostid of the first otherwise-importable pool. After adopting a detected hostid, ZFSBootMenu will subsequently attempt to import as many pools as possible. This option is forbidden on big-endian systems. This is the default import policy.

=item B<zbm.import_policy=strict>

Set this option to only import pools that match the SPL hostid configured in ZFSBootMenu. If none can be imported, an emergency shell will be invoked. The I<strict> policy is consistent with the behavior of earlier versions of ZFSBootMenu.

=item B<zbm.import_policy=force>

Set this option to attempt to force pool imports. When set, this invokes I<zpool import -f> in place of the regular I<zpool import> command, which will attempt to import a pool that's potentially in use on another system. Use this option with caution!

=back

=item B<zbm.set_hostid>

On little-endian systems, setting this option will cause ZFSBootMenu to set the I<spl.spl_hostid> command-line parameter for the selected boot environment to the hostid used to import its pool. The SPL kernel module will use this value as the hostid of the booted environment regardless of the contents of I</etc/hostid>. As a special case, if the hostid to be set is zero, ZFSBootMenu will instead set I<spl_hostid=00000000>, which should be used by dracut-based initramfs images to write an all-zero I</etc/hostid> in the initramfs prior to importing the boot pool. This option is on by default.

This option has no effect on big-endian systems.

B<Note:> Setting I<spl.spl_hostid> to a non-zero value on the kernel commandline will make the ZFS kernel modules B<ignore> any value set in I</etc/hostid>. To restore standard ZFS behavior on a running system, execute

=over 4

echo 0 > /sys/module/spl/paramters/spl_hostid

=back

=item B<zbm.sort_key>

This option accepts a ZFS property name by which the boot environment and snapshot lists will be sorted.

=over 2

=item B<zbm.sort_key=name>

Sort the lists by I<name>. This is the default sorting method.

=item B<zbm.sort_key=creation>

Sort the lists by I<creation> date.

=item B<zbm.sort_key=used>

Sort the lists by size I<used>.

=back

=item B<zbm.timeout>

This option accepts numeric values that control whether and when the boot-environment menu should be displayed.

=over 2

=item B<zbm.timeout=0> | B<zbm.skip>

When possible, bypass the menu and immediately boot a configured I<bootfs> pool property.

=item B<zbm.timeout=-1> | B<zbm.show>

Rather than present a countdown timer for automatic selection, immediately display the boot-environment menu.

=item B<zbm.timeout=E<lt>positive integerE<gt>>

Display a countdown timer for the specified number of seconds before booting the configured I<bootfs> boot environment.

=back

=back

=head1 Deprecated Command-Line Parameters

=over 4

=item B<timeout>

Deprecated; use B<zbm.timeout>.

=item B<root=zfsbootmenu:POOL=E<lt>poolE<gt>>

Deprecated; use B<zbm.prefer>.

=item B<force_import=1>

Deprecated; use B<zbm.import_policy=force>.

=item B<zbm.force_import=1>

Deprecated; use B<zbm.import_policy=force>.

=back

=head1 ZFS Properties

The following properties can be set at any level of the boot-environment hierarchy to control boot behavior.

=over 4

=item B<org.zfsbootmenu:kernel>

An identifier used to select which kernel to boot among all kernels found in the I</boot> directory of the selected boot environment. This can be a partial kernel name (e.g., I<5.4>) or a full filename (e.g., I<vmlinuz-5.7.11_1>).

If the identifier does not match any kernels, the latest kernel will be chosen as a fallback.

=item B<org.zfsbootmenu:commandline>

A list of command-line arguments passed to the kernel selected by ZFSBootMenu for final boot.

Do not set I<root=>; ZFSBootMenu will set this option for for you.

=item B<org.zfsbootmenu:active>

This controls whether boot environments appear in or are hidden from ZFSBootMenu.

=over 2

=item B<off>

For boot environments with I<mountpoint=/>, set B<org.zfsbootmenu:active=off> to B<HIDE> the environment.

=item B<on>

For boot environments with I<mountpoint=legacy>, set B<org.zfsbootmenu:active=on> to B<SHOW> the environment.

=back

By default, ZFSBootMenu only shows boot environments with the property I<mountpoint=/>.

=item B<org.zfsbootmenu:rootprefix>

This specifies the prefix added to the ZFS filesystem provided as the root filesystem on the kernel command line. For example, the command-line argument I<root=zfs:zroot/ROOT/void> has root prefix I<root=zfs:>.

The default prefix is I<root=zfs:> for most boot environments. Environments that appear to be Arch Linux will use I<zfs=> by default, while those that appear to be Gentoo will use a default of I<root=ZFS=>. The root prefix is generally determined by the initramfs generator, and the default is selected to match the expectation of the preferred initramfs generator on each distribution.

Set this property to override the value determined from inspecting the boot environment.

=item B<org.zfsbootmenu:keysource=E<lt>filesystemE<gt>>

If specified, this provides the name of the ZFS filesystem from which keys for a particular boot environment will be sourced.

Normally, when ZFSBootMenu attempts to load encryption keys for a boot environment, it will attempt to look for a key file at the path specified by the I<keylocation> property on the I<encryptionroot> for that boot environment. If that file does not exist, and I<keyformat=passphrase> is set for the I<encryptionroot> (or I<keylocation=prompt>), ZFSBootMenu will prompt for a passphrase to unlock the boot environment. These passphrases entered are not cached by default.

When B<org.zfsbootmenu:keysource> is a mountable ZFS filesystem, before prompting for a passphrase when I<keylocation> is not set to I<prompt>, ZFSBootMenu will attempt to mount B<E<lt>filesystemE<gt>> (unlocking that, if necessary) and search for the key file at I<keylocation> relative to B<E<lt>filesystemE<gt>>. If such a file is found, it will be copied to the initramfs, and the copy in the initramfs will be used to decrypt the original boot environment. Any copied keys are retained until ZFSBootMenu boots an environment, so a single password prompt can be sufficient to unlock several pools with the same I<keysource> or prevent prompts from reappearing when the pool must be exported and reimported (for example, to alter boot parameters from within ZFSBootMenu).

=back

=head1 Dracut Options

In addition to standard dracut configuration options, the ZFSBootMenu dracut module supports addtional options to customize boot behavior.

=over 4

=item B<zfsbootmenu_setup=E<lt>executable-listE<gt>>

An optional variable specifying a space-separated list of paths to setup hooks that will be installed in the ZFSBootMenu initramfs. Any path in the list B<E<lt>executable-listE<gt>> that exists and is executable will be installed.

Any installed hooks are run right before the ZFSBootMenu menu will be presented; ZFS pools will generally have been imported and the default boot environment will be available in the I<BOOTFS> environment variable. Hooks will not be run if the countdown timer expires (or was set to zero) and the default boot environment is automatically selected. B<Note:> The hooks may be run multiple times if the menu is invoked multiple times, e.g., by dropping to an emergency shell and then returning to the menu. If a script should only run once, the script is responsible for keeping track of this.

=item B<zfsbootmenu_teardown=E<lt>executable-listE<gt>>

An optional variable specifying a space-separated list of paths to teardown hooks that will be installed in the ZFSBootMenu initramfs. Any path in the list B<E<lt>executable-listE<gt>> that exists and is executable will be installed.

Some hardware initialized by the kernel used to boot ZFSBootMenu may not be properly reinitialized when a boot environment is launched. Any teardown hooks installed into the ZFSBootMenu initramfs, will be run immediately before B<kexec> is invoked to jump into the selected kernel. This script can be used, for example, to unbind drivers from hardware or remove kernel modules.

=back

=head1 SEE ALSO

B<generate-zbm>(5) B<generate-zbm>(8) B<dracut.conf>(5)

=head1 AUTHOR

ZFSBootMenu Team L<https://github.com/zbm-dev/zfsbootmenu>

=cut
